// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Submission    Submission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique()
  playlistUrl String
  resources   Resource[]
  videoId     String
  description String
  topic       String
  level       String
  logoUrl     String
}

model Resource {
  id          Int         @id @default(autoincrement())
  course      Course      @relation(fields: [courseSlug], references: [slug])
  courseSlug  String
  resourceUrl String
  videoId     String
  title       String
  part        Int
  excercises  Excercise[]
}

model Excercise {
  id          Int          @id @default(autoincrement())
  testingCode String
  prompt      String
  Resource    Resource?    @relation(fields: [resourceId], references: [id])
  resourceId  Int?
  Submission  Submission[]
}

model Submission {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  excercise   Excercise @relation(fields: [excerciseId], references: [id])
  userCode    String
  excerciseId Int
  correct     Boolean
}
